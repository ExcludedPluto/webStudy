Create 시 들어오는 데이터를 DTO로 지정하자.

	dto 폴더 생성

	create-movie.dto.ts 파일 생성

	다음처럼 초기 코드 작성
	
	export class CreateMovieDto {
  		readonly title: string;
  		readonly year: number;
  		readonly genres: string[];
	}




다음 두개를 설치
	npm i -g class-validator class-transformer




DTD에 다음과 같이 class-validator 안에 있는 데코로 타입검사

	export class CreateMovieDto {
  		@IsString()
  		readonly title: string;

  		@IsNumber()
  		readonly year: number;

  		@IsString({ each: true })
  		readonly genres: string[];
	}


여기서 장르는 꼭 안넣어도 되므로 @IsOptional() 로 감싸줌(이외에도 수많은 데코가 있음)

	@IsOptional()
	@IsString({ each: true })
  	readonly genres: string[];





main.ts에 다음처럼 파이프 추가.(파이프 : 들어오는 데이터를 한번 통과시킨 후 보냄)
	
	-> app.useGlobalPipes로 모든 HTTP 라우트 핸들러에 사용되는 글로벌 파이프 추가
	-> ValidationPipe를 추가하여 유효성 검사하는 파이프 추가
	-> whitelist : 데코를 가지고 있지 않은 거는 strip함
			즉, "hacked" : "by me" 같은 거는 들어가지 않는다.(title, year, genres 만 있으므로)
	-> forbidNonWhitelisted: whitelist로 걸러진 게 있으면 오류를 냄

	 app.useGlobalPipes(
    		new ValidationPipe({
      			whitelist: true,
      			forbidNonWhitelisted: true,
    		}),
  	);




그리고 컨트롤러와 서비스의 create에 다음처럼 타입을 지정하면, 이 타입대로 들어오지 않으면 404 오류를 낸다

 	@Post()
  	create(@Body() movieData: CreateMovieDto) {
    		return this.moviesServiece.create(movieData);
  	}



참고로 파이프를 통해 데이터의 타입을 바꿔서 들여보낼 수도 있다.
예를 들어 id는 string인데, 실질적으로 number로만 쓰이니 number로 들어오는 것이 바람직하다.
따라서 모든 id의 타입을 number로 바꾸고 다음을 파이프에 추가한다.

	app.useGlobalPipes(
    		new ValidationPipe({
      			whitelist: true,
      			forbidNonWhitelisted: true,
      			transform: true,			//이거
    		}),
  	);

	-> 이러면 적절한 데이터로 자동으로 바꿔서 들어간다.
	-> 물론 string으로 들어오지만 숫자여야 number로 바뀐다. 
	-> 숫자가 아닐경우 다음으로 넘어가거나 오류를 내므로 유효성검사도 겸함
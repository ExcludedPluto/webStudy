HTTP 서버 예시

	-> 요청이 오면, 그 요청에 담긴 url을 뽑고 주소를 만듬
	-> 그리고 그 파일을 불러와서 적절한 반환을 response에 담음



	const http = require("http");
	const fs = require("fs");
	const url = require("url");

	//서버 생성
	http
	   .createServer((request, response) => {
	      //URL 뒤에 있는 디렉토리, 파일이름 파싱
	      let pathname = url.parse(request.url).pathname;

	      console.log("Request for " + pathname + " received.");

	      //파일 이름이 비어잇으면 index.html로 설정
	      if (pathname == "/") {
	         pathname = "/index.html";
	      }

	      //파일을 읽기
	      fs.readFile(pathname.substr(1), (err, data) => {
	         if (err) {
	            console.log(err);

	            //페이지를 찾을 수 없음
	            // HTTP Status : 404 : NOT FOUND
	            // Content Type : test/plain
	            response.writeHead(404, { "Content-Type": "text/html" });

	         } else {
	            // 페이지를 찾음
	            // HTTP Status : 200 : OK
	            // Content Type : text/plain
	            response.writeHead(200, { "Content-Type": "text/html" });
	

	            //파일을 읽어와서 responseBody에 작성
	            response.write(data.toString());
	         }

	         // responseBody 전송
	         response.end();
	      });
	   })
	   .listen(8081);

	console.log("Server running at http://127.0.0.1:8081/");






HTTP 클라이언트 예시

	-> options로 얻고싶은 곳이 있는 위치와 얻고 싶은 것을 표시함
	-> http.request로 요청을 날림.





	const http = require("http");

	// HTTPRequest 의 옵션 설정
	const options = {
	   host: "localhost",
	   port: "8081",
	   path: "/index.html",
	};

	// 콜백 함수로 Response를 받아온다
	const callback = (response) => {
	   //response 이벤트가 감지되면 데이터를 body에 받아온다.
	   let body = "";
	   response.on("data", (data) => {
	      body += data;
	   });

	   //end 이벤트가 감지되면 데이터 수신을 종료하고 내용을 출력한다.
	   response.on("end", () => {
	      //데이터 수신 완료
	      console.log(body);
	   });
	};

	//서버에 HTTP Request 를 날린다.
	const req = http.request(options, callback);
	req.end();

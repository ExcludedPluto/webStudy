useReducer를 사용하여 깔끔하게 구현할 수 있다.

예시)

const reducer = (state, action) => {
   switch (action.type) {
      case "LOADING":
         return {
            loading: true,
            data: null,
            error: null,
         };
      case "SUCCESS":
         return {
            loading: false,
            data: action.data,
            error: null,
         };
      case "ERROR":
         return {
            loading: false,
            data: null,
            error: action.error,
         };
      default:
         throw new Error(`Unhandled action type : ${action.type}`);
   }
};

export const Users = () => {
   const [state, dispatch] = useReducer(reducer, {
      loading: false,
      data: null,
      error: null,
   });

   const fetchUsers = async () => {
      dispatch({ type: "LOADING" });

      try {
         const response = await axios.get(
            "https://jsonplaceholder.typicode.com/users"
         );
         dispatch({ type: "SUCCESS", data: response.data });
      } catch (e) {
         dispatch({ type: "ERROR", error: e });
      }
   };

   useEffect(() => {
      fetchUsers();
   }, []);

   if (state.loading) return <div>로딩중...</div>;
   if (state.error) return <div>에러</div>;
   if (!state.data) return null;

   return (
      <>
         <ul>
            {state.data.map((user) => (
               <li key={user.id}>
                  {user.username} ({user.name})
               </li>
            ))}
         </ul>
         <button onClick={fetchUsers}>다시</button>
      </>
   );
};



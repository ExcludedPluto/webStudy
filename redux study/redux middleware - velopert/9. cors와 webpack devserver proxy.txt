cors : 브라우저에서 API를 요청할 때, 브라우저의 현재주소와 API의 주소의 도메인이 일치해야지만 데이터에 접근이 가능
	다른 도메인에서 API를 요청해서 사용하게 해주려면 CORS 설정이 필요하다.

 	-> 서버측에서 데이터를 제공해줄 도메인을 설정하는 것.



나중에 개발을 할 때, 본인의 도메인으로 서버에 요청하려면, 백엔드개발자에게 허용해달라고 해야하는데

웹팩 개발서버에서 제공하는 Proxy라는 기능 사용하면 그럴필요는 없다.

	-> 웹팩 개발서버의 프록시를 사용하면, 브라우저 API를 요청할 때 현재 개발 서버의 주소로 요청을 하게 됨.
	-> 그러면 웹팩 개발서버는 해당 요청을 받고, 백엔드 서버로 요청하고, 응답한 내용을 브라우저에게 반환함.




적용법 : CRA 로 만든 리액트 프로젝트에선 package.json 에서 proxy 값을 설정하여 적용가능

	//package.json

	...
	"proxy" : "http://localhost:4000"


	그리고 요청할 땐, 풀 url이 아닌, 필요한 것만 적자 

	// api/posts.js

	 export const getPosts = async () => {
  		const response = await axios.get('/posts');		// 원래는 .get('http://localhost:4000');
  		return response.data;
	};




API의 도메인과 서비스의 도메인이 다를 때, axios의 baseURL을 설정하라

	axios.defaults.baseURL = process.env.NODE_ENV === "development" ? "/" : "https://api.velog.io/";

	process.env.NODE_ENV : 현재 환경이 프로덕션인지 개발모드인지 볼 수 있는 값 